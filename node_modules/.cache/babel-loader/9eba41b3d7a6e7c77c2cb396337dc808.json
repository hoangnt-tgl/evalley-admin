{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.push.js\";\nvar _require = require('../../config'),\n  BASE_URL = _require.BASE_URL;\nexport default {\n  data: function data() {\n    return {\n      items: [],\n      tablefields: [{\n        key: \"delete\"\n      }, {\n        key: \"image\",\n        label: \"Avatar\",\n        sortable: false\n      }, {\n        key: \"username\",\n        label: \"User Name\",\n        sortable: true\n      }, {\n        key: \"name\",\n        label: \"Name\",\n        sortable: false\n      }, {\n        key: \"email\",\n        label: \"Email\",\n        sortable: true\n      }, {\n        key: \"lastLogin\",\n        label: \"Last Login\",\n        sortable: false\n      }, {\n        key: \"role\",\n        label: \"Role\",\n        sortable: true\n      }, {\n        key: \"actions\"\n      }],\n      filter: null,\n      totalRows: 1,\n      currentPage: 1,\n      perPage: 10,\n      pageOptions: [5, 10, 15, 50],\n      selectMode: \"multi\",\n      selected: []\n    };\n  },\n  created: function created() {\n    var _this = this;\n    this.$http.post(\"\".concat(BASE_URL, \"/user/getall\"), {\n      token: \"\"\n    }).then(function (response) {\n      if (response.data.success) {\n        _this.items = response.data.user;\n      }\n    }).catch(function (error) {\n      console.log('error', error);\n    });\n  },\n  mounted: function mounted() {\n    // Set the initial number of items\n    this.totalRows = this.items.length;\n  },\n  computed: {\n    sortOptions: function sortOptions() {\n      // Create an options list from our fields\n      return this.tablefields.filter(function (f) {\n        return f.sortable;\n      }).map(function (f) {\n        return {\n          text: f.label,\n          value: f.key\n        };\n      });\n    },\n    selectedRows: function selectedRows() {\n      return this.items.filter(function (item) {\n        return item.delete;\n      });\n    }\n  },\n  methods: {\n    deleteSelected: function deleteSelected(item) {\n      var objIndex = this.selected.findIndex(function (obj) {\n        return obj == item._id;\n      });\n      if (objIndex > -1) {\n        this.selected.splice(objIndex, 1);\n      } else {\n        this.selected.push(item._id);\n      }\n    },\n    getImgUrl: function getImgUrl(path) {\n      return require(\"@/assets/images/users/\" + path);\n    },\n    rowSelected: function rowSelected(item) {\n      this.selected = item._id;\n      if (item[0]) {\n        this.edit = this.edit !== item[0]._id ? item[0]._id : null;\n      }\n    },\n    onFiltered: function onFiltered(filteredItems) {\n      // Trigger pagination to update the number of buttons/pages due to filtering\n      this.totalRows = filteredItems.length;\n      this.currentPage = 1;\n    },\n    deleteRow: function deleteRow() {\n      var _this2 = this;\n      for (var i = this.items.length - 1; i >= 0; i--) {\n        for (var j = 0; j < this.selected.length; j++) {\n          if (this.items[i] && this.items[i]._id === this.selected[j]) {\n            this.items.splice(i, 1);\n          }\n        }\n      }\n      this.$http.post(\"\".concat(BASE_URL, \"/user/delete\"), {\n        token: \"\",\n        selected: this.selected\n      }).then(function (response) {\n        if (response.data.success) {\n          _this2.$toasted.show(response.data.message, {\n            theme: \"bubble\",\n            position: \"top-right\",\n            type: \"success\",\n            duration: 2000\n          });\n        } else {\n          _this2.$toasted.show(response.data.message, {\n            theme: \"bubble\",\n            position: \"top-right\",\n            type: \"error\",\n            duration: 2000\n          });\n        }\n      }).catch(function (error) {\n        console.log('error', error);\n      });\n    },\n    deleteBatchRow: function deleteBatchRow() {\n      for (var i = 0; i < this.selected.length; i++) {\n        if (this.items[i]._id == this.selected[i]) {\n          this.items.splice(this.items[i], 1);\n        }\n      }\n      console.log(-1);\n    },\n    showMsgBoxTwo: function showMsgBoxTwo() {\n      var _this3 = this;\n      this.$bvModal.msgBoxConfirm('Are you sure!', {\n        title: 'Confirmation',\n        size: 'md',\n        buttonSize: 'sm',\n        okVariant: 'primary',\n        okTitle: 'YES',\n        cancelTitle: 'CANCLE',\n        footerClass: 'p-2',\n        hideHeaderClose: false\n        // centered: true\n      }).then(function (value) {\n        if (value) {\n          _this3.deleteRow();\n          _this3.selected = [];\n        }\n      }).catch(function (err) {\n        // An error occurred\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;AA4KA;EAAAA;AAEA;EACAC;IACA;MACAC;MACAC,cACA;QAAAC;MAAA,GACA;QAAAA;QAAAC;QAAAC;MAAA,GACA;QAAAF;QAAAC;QAAAC;MAAA,GACA;QAAAF;QAAAC;QAAAC;MAAA,GACA;QAAAF;QAAAC;QAAAC;MAAA,GACA;QAAAF;QAAAC;QAAAC;MAAA,GACA;QAAAF;QAAAC;QAAAC;MAAA,GACA;QAAAF;MAAA,EACA;MACAG;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IAAA;IACA;MACAC;IACA,GACAC;MACA;QACA;MACA;IACA,GACAC;MACAC;IACA;EAEA;EACAC;IACA;IACA;EACA;EACAC;IACAC;MACA;MACA,wBACAd;QAAA;MAAA,GACAe;QACA;UAAAC;UAAAC;QAAA;MACA;IACA;IACAC;MACA;QAAA;MAAA;IACA;EACA;EACAC;IACAC;MACA;QAAA;MAAA;MACA;QACA;MACA;QACA;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;MACA;QACA;MACA;IACA;IACAC;MACA;MACA;MACA;IACA;IACAC;MAAA;MACA;QACA;UACA;YACA;UACA;QACA;MACA;MACA;QACAhB;QACAF;MACA,GACAG;QACA;UACA;YACAgB;YACAC;YACAC;YACAC;UACA;QACA;UACA;YACAH;YACAC;YACAC;YACAC;UACA;QACA;MACA,GACAlB;QACAC;MACA;IACA;IACAkB;MACA;QACA;UACA;QACA;MACA;MACAlB;IACA;IACAmB;MAAA;MACA;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACA;MACA,GACA7B;QACA;UACA;UACA;QACA;MACA,GACAC;QACA;MACA;IACA;EACA;AACA","names":["BASE_URL","data","items","tablefields","key","label","sortable","filter","totalRows","currentPage","perPage","pageOptions","selectMode","selected","created","token","then","catch","console","mounted","computed","sortOptions","map","text","value","selectedRows","methods","deleteSelected","getImgUrl","rowSelected","onFiltered","deleteRow","theme","position","type","duration","deleteBatchRow","showMsgBoxTwo","title","size","buttonSize","okVariant","okTitle","cancelTitle","footerClass","hideHeaderClose"],"sourceRoot":"src/views/users","sources":["UserList.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"container-fluid\">\n      <div class=\"page-header\">\n        <Breadcrumbs main=\"Users\" title=\"User Lists\" />\n      </div>\n    </div>\n    <div class=\"container-fluid\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"card\">\n            <div class=\"card-header\">\n              <h5>User Detail</h5>\n            </div>\n            <div class=\"card-body\">\n              <div class=\"row justify-content-end\">\n                <!-- <router-link to=\"/create-user\" class=\"col\">\n                  <b-button class=\"btn-popup pull-right\">Create User</b-button >\n                </router-link> -->\n\n                <router-link to=\"/create-user\" class=\"col-auto\">\n                  <b-button class=\"btn-popup pull-right\">Create User</b-button >\n                </router-link>\n              </div>\n              <b-row>\n                <b-col xl=\"3\" lg=\"4\" md=\"6\">\n                  <b-form-group\n                    label-cols=\"3\"\n                    label=\"show\"\n                    class=\"datatable-select\"\n                  >\n                    <b-form-select\n                      v-model=\"perPage\"\n                      :options=\"pageOptions\"\n                    ></b-form-select>\n                  </b-form-group>\n                </b-col>\n                <b-col class=\"offset-xl-6 offset-lg-2 search-rs\" xl=\"3\" lg=\"5\" md=\"6\">\n                  <b-form-group\n                    label-cols=\"3\"\n                    label=\"Search\"\n                    class=\"datatable-select\"\n                  >\n                    <b-form-input\n                      type=\"text\"\n                      v-model=\"filter\"\n                      placeholder=\"Search\"\n                    ></b-form-input>\n                  </b-form-group>\n                </b-col>\n              </b-row>\n              <div class=\"table-responsive datatable-vue user-list\">\n                <div>\n                  <b-modal\n                    id=\"modal-1\"\n                    title=\"Confirmation\"\n                    @ok=\"deleteBatchRow\"\n                  >\n                    <p class=\"my-4\">Are you sure!</p>\n                  </b-modal>\n                </div>\n                <div></div>\n                <!--<commonTable\n                  :selectMode=\"selectMode\"\n                  :items=\"items\"\n                  :fields=\"tablefields\"\n                  :filter=\"filter\"\n                  :perPage=\"perPage\"\n                  :totalRows=\"totalRows\"\n                  :currentPage=\"currentPage\"\n                  :selectable=\"false\"\n                >\n                </commonTable>-->\n                <b-table\n                  class=\"text-center\"\n                  :select-mode=\"selectMode\"\n                  show-empty\n                  striped\n                  hover\n                  head-variant=\"light\"\n                  bordered\n                  stacked=\"md\"\n                  :items=\"items\"\n                  :fields=\"tablefields\"\n                  :filter=\"filter\"\n                  :current-page=\"currentPage\"\n                  :per-page=\"perPage\"\n                  @filtered=\"onFiltered\"\n                  @row-selected=\"rowSelected\"\n                >\n                  <template v-slot:head(delete)>\n                    <b-button\n                      variant=\"danger\"\n                      :disabled=\"selectedRows.length === 0\"\n                      @click=\"showMsgBoxTwo\"\n                      >Delete</b-button\n                    >\n                  </template>\n                  <template #cell(image)=\"field\">\n                    <img\n                      height=\"50px\"\n                      :src=\"getImgUrl(field.item.avatar)\"\n                      width=\"50px\"\n                    />\n                  </template>\n                  <template v-slot:cell(actions)=\"{ item }\">\n                    <router-link\n                      style=\"font-size: 20px; color: blue;\"\n                      :to=\"'/edit-user/'+item._id\"\n                    >\n                      <feather\n                        type=\"edit-2\"\n                        stroke=\"#3758FD\"\n                        stroke-width=\"1\"\n                        size=\"18px\"\n                        fill=\"#3758FD\"\n                        stroke-linejoin=\"round\"\n                      ></feather>\n                    </router-link>\n\n                    \n                \n                  </template>\n                  <template #cell(status) v-for=\"(item, index) in items\">\n                    <feather\n                      v-if=\"item.status == 'active'\"\n                      :key=\"index\"\n                      type=\"circle\"\n                      stroke=\"#81BA01\"\n                      stroke-width=\"1\"\n                      size=\"12px\"\n                      :fill=\"\n                        item.status == 'active'\n                          ? '#81BA01'\n                          : item.status == 'inactive'\n                          ? '#FBBC58'\n                          : ''\n                      \"\n                      stroke-linejoin=\"round\"\n                    ></feather>\n                  </template>\n                  <b-table-column v-slot:cell(delete)>\n                    <a href=\"#\">edit</a>\n                    <a href=\"#\">remove</a>\n                  </b-table-column>\n\n                  <template v-slot:cell(delete)=\"{ item, field: { key } }\">\n                    <b-checkbox\n                      v-model=\"item[key]\"\n                      @change=\"deleteSelected(item)\"\n                    ></b-checkbox>\n                  </template>\n                </b-table>\n              </div>\n              <b-col md=\"12\" class=\"my-1 p-0 pagination-justify\">\n                <b-pagination\n                  v-model=\"currentPage\"\n                  :total-rows=\"totalRows\"\n                  :per-page=\"perPage\"\n                  aria-controls=\"my-table\"\n                  class=\"mt-4\"\n                ></b-pagination>\n              </b-col>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nconst {BASE_URL} =  require('../../config')\n\nexport default {\n    data() {\n        return {\n            items: [],\n            tablefields: [\n                { key: \"delete\" },\n                { key: \"image\", label: \"Avatar\", sortable: false },\n                { key: \"username\", label: \"User Name\", sortable: true },\n                { key: \"name\", label: \"Name\", sortable: false },\n                { key: \"email\", label: \"Email\", sortable: true },\n                { key: \"lastLogin\", label: \"Last Login\", sortable: false },\n                { key: \"role\", label: \"Role\", sortable: true },\n                { key: \"actions\" }\n            ],\n            filter: null,\n            totalRows: 1,\n            currentPage: 1,\n            perPage: 10,\n            pageOptions: [5, 10, 15, 50],\n            selectMode: \"multi\",\n            selected: []\n        };\n    },\n    created() {\n        this.$http.post(`${BASE_URL}/user/getall`, {\n            token: \"\"\n        })\n        .then(response => {\n            if(response.data.success){\n                this.items = response.data.user           \n            }\n        })\n        .catch(function (error) {\n            console.log('error', error);\n        });\n        \n    },\n    mounted() {\n        // Set the initial number of items\n        this.totalRows = this.items.length;\n    },\n    computed: {\n        sortOptions() {\n        // Create an options list from our fields\n        return this.tablefields\n            .filter(f => f.sortable)\n            .map(f => {\n            return { text: f.label, value: f.key };\n            });\n        },\n        selectedRows() {\n            return this.items.filter(item => item.delete);\n        }\n    },\n    methods: {\n        deleteSelected(item) {\n            let objIndex = this.selected.findIndex((obj => obj == item._id));\n            if (objIndex > -1) {\n                this.selected.splice(objIndex, 1);\n            } else {\n                this.selected.push(item._id)\n            }\n        },\n        getImgUrl(path) {\n            return require(\"@/assets/images/users/\" + path);\n        },\n        rowSelected(item) {\n            this.selected = item._id;\n            if (item[0]) {\n                this.edit = this.edit !== item[0]._id ? item[0]._id : null;\n            }\n        },\n        onFiltered(filteredItems) {\n            // Trigger pagination to update the number of buttons/pages due to filtering\n            this.totalRows = filteredItems.length;\n            this.currentPage = 1;\n        },\n        deleteRow() {\n            for( var i=this.items.length - 1; i>=0; i--){\n                for( var j=0; j<this.selected.length; j++){\n                    if(this.items[i] && (this.items[i]._id === this.selected[j])){\n                        this.items.splice(i, 1);\n                    }\n                }\n            }\n            this.$http.post(`${BASE_URL}/user/delete`, {\n                token: \"\",\n                selected: this.selected\n            })\n            .then(response => {\n                if(response.data.success){\n                  this.$toasted.show(response.data.message, {\n                    theme: \"bubble\",\n                    position: \"top-right\",\n                    type: \"success\",\n                    duration: 2000\n                  });             \n                } else {\n                  this.$toasted.show(response.data.message, {\n                    theme: \"bubble\",\n                    position: \"top-right\",\n                    type: \"error\",\n                    duration: 2000\n                  });\n                }\n            })\n            .catch(function (error) {\n                console.log('error', error);\n            });\n        },\n        deleteBatchRow() {\n            for (var i = 0; i < this.selected.length; i++) {\n                if (this.items[i]._id == this.selected[i]) {\n                    this.items.splice(this.items[i], 1);\n                }\n            }\n            console.log(-1)\n        },\n        showMsgBoxTwo() {\n            this.$bvModal.msgBoxConfirm('Are you sure!', {\n            title: 'Confirmation',\n            size: 'md',\n            buttonSize: 'sm',\n            okVariant: 'primary',\n            okTitle: 'YES',\n            cancelTitle: 'CANCLE',\n            footerClass: 'p-2',\n            hideHeaderClose: false,\n            // centered: true\n            })\n            .then(value => {\n                if (value){\n                    this.deleteRow();\n                    this.selected = [];\n                } \n            })\n            .catch(err => {\n                // An error occurred\n            })\n        }\n    }\n};\n</script>"]},"metadata":{},"sourceType":"module"}